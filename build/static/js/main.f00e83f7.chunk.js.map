{"version":3,"sources":["components/Score.js","components/TopNav.js","components/Main.js","components/ClickImage.js","components/ClickyGame.js","serviceWorker.js","index.js","App.js"],"names":["Score","state","message","animating","renderMessage","_this","prevState","score","_ref","topScore","newState","this","props","setState","_this2","react_default","a","createElement","className","onAnimationEnd","Component","TopNav","Score_Score","Main","children","ClickImage","role","aria-label","onClick","handleClick","id","style","backgroundImage","concat","image","shake","ClickyGame","data","correctGuess","newData","_this$state","newScore","newTopScore","Math","max","shuffleData","incorrectGuess","resetData","map","item","Object","objectSpread","clicked","i","length","j","floor","random","temp","handleItemClick","guessedCorrectly","newItem","key","Boolean","window","location","hostname","match","ReactDOM","render","ClickyGame_ClickyGame","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f00e83f7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport '../styles/score.css';\r\n\r\n//  lets the user know if they were correct of not\r\n// called into TopNav.js\r\n\r\nexport default class Score extends Component {\r\n  state = {\r\n    message: \"\",\r\n    animating: false\r\n  };\r\n\r\n  componentDidUpdate({ score, topScore }, prevState) {\r\n    const newState = { animating: true };\r\n\r\n    if (score === 0 && topScore === 0) {\r\n      newState.message = \"\";\r\n    } else if (score === 0 && topScore > 0) {\r\n      newState.message = \"incorrect\";\r\n    } else {\r\n      newState.message = \"correct\";\r\n    }\r\n\r\n    if (score !== this.props.score || this.state.message !== newState.message) {\r\n      this.setState(newState);\r\n    }\r\n  }\r\n\r\n  renderMessage = () => {\r\n    switch (this.state.message) {\r\n    case \"correct\":\r\n      return \"Alright! You guessed correctly!\";\r\n    case \"incorrect\":\r\n      return \"oh...nooo, you guessed incorrectly!\";\r\n    default:\r\n      return \"Click an image to begin! Don't click an image more than once!\";\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <li\r\n        className={this.state.animating ? this.state.message : \"\"}\r\n        onAnimationEnd={() => this.setState({ animating: false })}\r\n      >\r\n        {this.renderMessage()}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport '../styles/topnav.css';\r\nimport ScoreMessage from './Score';\r\n\r\n// Component Navbar sets props from clickygame.js into score.js\r\n//Works with Score.js\r\n\r\n export default function TopNav(props) {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <ul>\r\n        <li>Clicky Game</li>\r\n        <ScoreMessage score={props.score} topScore={props.topScore} />\r\n        <li>\r\n          Score: {props.score} | Top Score: {props.topScore}\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\n// index -> app -> ClickyGame -> TopNav -> Score","import React from \"react\";\r\nimport '../styles/main.css';\r\n\r\nexport default function Main(props) {\r\n  return <main className=\"container\">{props.children}</main>;\r\n}\r\n","import React from \"react\";\r\nimport '../styles/click.css';\r\n\r\n export default function ClickImage(props) {\r\n  return (\r\n    <div\r\n      role=\"img\"\r\n      aria-label=\"click image\"\r\n      onClick={() => props.handleClick(props.id)}\r\n      style={{ backgroundImage: `url(\"${props.image}\")` }}\r\n      className={`click-item${props.shake ? \" shake\" : \"\"}`}\r\n    />\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport TopNav from './TopNav'; //Top Navigation bar with the score display\r\nimport Container from './Main'; // Main section where the images will display.\r\nimport ClickImage from './ClickImage'; // making clickablt images\r\nimport data from '../data.json'; //images in assets placed into a json array\r\n\r\n//clickygame gathers all the other componenets and sets the states.\r\n\r\nexport default class ClickyGame extends Component {\r\n  state = {\r\n    data,\r\n    score: 0,\r\n    topScore: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ data: this.shuffleData(this.state.data) });\r\n  }\r\n\r\n  correctGuess = newData => {\r\n    const { topScore, score } = this.state;\r\n    const newScore = score + 1;\r\n    const newTopScore = Math.max(newScore, topScore);\r\n\r\n    this.setState({\r\n      data: this.shuffleData(newData),\r\n      score: newScore,\r\n      topScore: newTopScore\r\n    });\r\n  };\r\n\r\n  incorrectGuess = data => {\r\n    this.setState({\r\n      data: this.resetData(data),\r\n      score: 0\r\n    });\r\n  };\r\n\r\n  resetData = data => {\r\n    const resetData = data.map(item => ({ ...item, clicked: false }));\r\n    return this.shuffleData(resetData);\r\n  };\r\n\r\n  shuffleData = data => {\r\n    let i = data.length - 1;\r\n    while (i > 0) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      const temp = data[i];\r\n      data[i] = data[j];\r\n      data[j] = temp;\r\n      i--;\r\n    }\r\n    return data;\r\n  };\r\n\r\n  handleItemClick = id => {\r\n    let guessedCorrectly = false;\r\n    const newData = this.state.data.map(item => {\r\n      const newItem = { ...item };\r\n      if (newItem.id === id) {\r\n        if (!newItem.clicked) {\r\n          newItem.clicked = true;\r\n          guessedCorrectly = true;\r\n        }\r\n      }\r\n      return newItem;\r\n    });\r\n    guessedCorrectly\r\n      ? this.correctGuess(newData)\r\n      : this.incorrectGuess(newData);\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <TopNav score={this.state.score} topScore={this.state.topScore} />\r\n        <Container>\r\n          {this.state.data.map(item => (\r\n            <ClickImage\r\n              key={item.id}\r\n              id={item.id}\r\n              shake={!this.state.score && this.state.topScore}\r\n              handleClick={this.handleItemClick}\r\n              image={item.image}\r\n            />\r\n          ))}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//index.js take the app function and renders it in the browser\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","import React from 'react'; //React\nimport ClickyGame from './components/ClickyGame';\n\n//App.js just holds the Clickygame.js file in order to send it into index.js\n\n export default function App() {\n  return (\n    <ClickyGame />\n  );\n}"],"sourceRoot":""}